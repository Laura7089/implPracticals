-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParSExpr.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pSEpxr -> SEpxr                             (0)
	%start_pSExpr -> SExpr                             (1)
	%start_pVal -> Val                                 (2)
	Integer -> L_integ                                 (3)
	Ident -> L_ident                                   (4)
	SEpxr -> '()'                                      (5)
	SExpr -> Val                                       (6)
	SExpr -> '(' SExpr '.' SExpr ')'                   (7)
	Val -> Integer                                     (8)
	Val -> Ident                                       (9)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	'()'           { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'.'            { PT _ (TS _ 4) }
	L_integ        { PT _ (TI $$) }
	L_ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pSEpxr   rule  0
	%start_pSExpr   rule  1
	%start_pVal     rule  2
	Integer         rule  3
	Ident           rule  4
	SEpxr           rule  5
	SExpr           rules 6, 7
	Val             rules 8, 9

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'()'           shift, and enter state 13

	SEpxr          goto state 12

State 1


	'('            shift, and enter state 11
	L_integ        shift, and enter state 4
	L_ident        shift, and enter state 8

	Integer        goto state 5
	Ident          goto state 6
	SExpr          goto state 9
	Val            goto state 10

State 2


	L_integ        shift, and enter state 4
	L_ident        shift, and enter state 8

	Integer        goto state 5
	Ident          goto state 6
	Val            goto state 7

State 3


	L_integ        shift, and enter state 4


State 4

	Integer -> L_integ .                                (rule 3)

	')'            reduce using rule 3
	'.'            reduce using rule 3
	%eof           reduce using rule 3


State 5

	Val -> Integer .                                    (rule 8)

	')'            reduce using rule 8
	'.'            reduce using rule 8
	%eof           reduce using rule 8


State 6

	Val -> Ident .                                      (rule 9)

	')'            reduce using rule 9
	'.'            reduce using rule 9
	%eof           reduce using rule 9


State 7

	%start_pVal -> Val .                                (rule 2)

	%eof           accept


State 8

	Ident -> L_ident .                                  (rule 4)

	')'            reduce using rule 4
	'.'            reduce using rule 4
	%eof           reduce using rule 4


State 9

	%start_pSExpr -> SExpr .                            (rule 1)

	%eof           accept


State 10

	SExpr -> Val .                                      (rule 6)

	')'            reduce using rule 6
	'.'            reduce using rule 6
	%eof           reduce using rule 6


State 11

	SExpr -> '(' . SExpr '.' SExpr ')'                  (rule 7)

	'('            shift, and enter state 11
	L_integ        shift, and enter state 4
	L_ident        shift, and enter state 8

	Integer        goto state 5
	Ident          goto state 6
	SExpr          goto state 14
	Val            goto state 10

State 12

	%start_pSEpxr -> SEpxr .                            (rule 0)

	%eof           accept


State 13

	SEpxr -> '()' .                                     (rule 5)

	%eof           reduce using rule 5


State 14

	SExpr -> '(' SExpr . '.' SExpr ')'                  (rule 7)

	'.'            shift, and enter state 15


State 15

	SExpr -> '(' SExpr '.' . SExpr ')'                  (rule 7)

	'('            shift, and enter state 11
	L_integ        shift, and enter state 4
	L_ident        shift, and enter state 8

	Integer        goto state 5
	Ident          goto state 6
	SExpr          goto state 16
	Val            goto state 10

State 16

	SExpr -> '(' SExpr '.' SExpr . ')'                  (rule 7)

	')'            shift, and enter state 17


State 17

	SExpr -> '(' SExpr '.' SExpr ')' .                  (rule 7)

	')'            reduce using rule 7
	'.'            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 10
Number of terminals: 6
Number of non-terminals: 8
Number of states: 18
