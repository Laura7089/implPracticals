-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParIntExpV.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pIntExp -> IntExp                           (0)
	%start_pIntExp1 -> IntExp1                         (1)
	%start_pIntExp2 -> IntExp2                         (2)
	%start_pIntExp3 -> IntExp3                         (3)
	Integer -> L_integ                                 (4)
	Ident -> L_ident                                   (5)
	IntExp -> IntExp1 '+' IntExp                       (6)
	IntExp -> IntExp1                                  (7)
	IntExp1 -> IntExp2 '*' IntExp1                     (8)
	IntExp1 -> IntExp2                                 (9)
	IntExp2 -> 'NEG' IntExp2                           (10)
	IntExp2 -> IntExp3                                 (11)
	IntExp3 -> Integer                                 (12)
	IntExp3 -> Ident                                   (13)
	IntExp3 -> '(' IntExp ')'                          (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'NEG'          { PT _ (TS _ 5) }
	L_integ        { PT _ (TI $$) }
	L_ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pIntExp  rule  0
	%start_pIntExp1 rule  1
	%start_pIntExp2 rule  2
	%start_pIntExp3 rule  3
	Integer         rule  4
	Ident           rule  5
	IntExp          rules 6, 7
	IntExp1         rules 8, 9
	IntExp2         rules 10, 11
	IntExp3         rules 12, 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp         goto state 16
	IntExp1        goto state 17
	IntExp2        goto state 15
	IntExp3        goto state 12

State 1


	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp1        goto state 14
	IntExp2        goto state 15
	IntExp3        goto state 12

State 2


	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp2        goto state 11
	IntExp3        goto state 12

State 3


	'('            shift, and enter state 9
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp3        goto state 8

State 4


	L_integ        shift, and enter state 5


State 5

	Integer -> L_integ .                                (rule 4)

	')'            reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	IntExp3 -> Integer .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	%eof           reduce using rule 12


State 7

	IntExp3 -> Ident .                                  (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	%eof           reduce using rule 13


State 8

	%start_pIntExp3 -> IntExp3 .                        (rule 3)

	%eof           accept


State 9

	IntExp3 -> '(' . IntExp ')'                         (rule 14)

	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp         goto state 21
	IntExp1        goto state 17
	IntExp2        goto state 15
	IntExp3        goto state 12

State 10

	Ident -> L_ident .                                  (rule 5)

	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	%eof           reduce using rule 5


State 11

	%start_pIntExp2 -> IntExp2 .                        (rule 2)

	%eof           accept


State 12

	IntExp2 -> IntExp3 .                                (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	%eof           reduce using rule 11


State 13

	IntExp2 -> 'NEG' . IntExp2                          (rule 10)

	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp2        goto state 20
	IntExp3        goto state 12

State 14

	%start_pIntExp1 -> IntExp1 .                        (rule 1)

	%eof           accept


State 15

	IntExp1 -> IntExp2 . '*' IntExp1                    (rule 8)
	IntExp1 -> IntExp2 .                                (rule 9)

	')'            reduce using rule 9
	'*'            shift, and enter state 19
	'+'            reduce using rule 9
	%eof           reduce using rule 9


State 16

	%start_pIntExp -> IntExp .                          (rule 0)

	%eof           accept


State 17

	IntExp -> IntExp1 . '+' IntExp                      (rule 6)
	IntExp -> IntExp1 .                                 (rule 7)

	')'            reduce using rule 7
	'+'            shift, and enter state 18
	%eof           reduce using rule 7


State 18

	IntExp -> IntExp1 '+' . IntExp                      (rule 6)

	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp         goto state 24
	IntExp1        goto state 17
	IntExp2        goto state 15
	IntExp3        goto state 12

State 19

	IntExp1 -> IntExp2 '*' . IntExp1                    (rule 8)

	'('            shift, and enter state 9
	'NEG'          shift, and enter state 13
	L_integ        shift, and enter state 5
	L_ident        shift, and enter state 10

	Integer        goto state 6
	Ident          goto state 7
	IntExp1        goto state 23
	IntExp2        goto state 15
	IntExp3        goto state 12

State 20

	IntExp2 -> 'NEG' IntExp2 .                          (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	%eof           reduce using rule 10


State 21

	IntExp3 -> '(' IntExp . ')'                         (rule 14)

	')'            shift, and enter state 22


State 22

	IntExp3 -> '(' IntExp ')' .                         (rule 14)

	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	%eof           reduce using rule 14


State 23

	IntExp1 -> IntExp2 '*' IntExp1 .                    (rule 8)

	')'            reduce using rule 8
	'+'            reduce using rule 8
	%eof           reduce using rule 8


State 24

	IntExp -> IntExp1 '+' IntExp .                      (rule 6)

	')'            reduce using rule 6
	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 7
Number of non-terminals: 10
Number of states: 25
